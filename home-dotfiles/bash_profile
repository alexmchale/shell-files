if [ -f ~/.bashrc ]; then . ~/.bashrc; fi

# Define the ANSI colors.
         CLEAR="\033[00m"
           RED="\033[0;31m"
     LIGHT_RED="\033[1;31m"
         GREEN="\033[0;32m"
   LIGHT_GREEN="\033[1;32m"
         GREEN="\033[0;32m"
   LIGHT_GREEN="\033[1;32m"
        YELLOW="\033[0;33m"
  LIGHT_YELLOW="\033[1;33m"
          BLUE="\033[0;34m"
    LIGHT_BLUE="\033[1;34m"
       MAGENTA="\033[0;35m"
 LIGHT_MAGENTA="\033[1;35m"
         WHITE="\033[1;37m"
    LIGHT_GRAY="\033[0;37m"

GREP_SEARCH_PATH="Gemfile app bin config db/schema.rb db/migrate lib test public spec features"

function current-time {
  echo -n `date +"%l:%M"`
}

function git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/*\1/'
}

hg_branch() {
  hg prompt > /dev/null 2>&1 && hg prompt "{status}{branch}" 2> /dev/null
}

function repo_prompt {
  GIT="$(git_branch)"
  HG="$(hg_branch)"

  if [ ! -z "$GIT" ]; then
    echo -n " $GIT"
  elif [ ! -z "$HG" ]; then
    echo -n " $HG"
  fi
}

function rvm_prompt {
  local gemset=$(echo $GEM_HOME | awk -F'@' '{print $2}')
  [ "$gemset" != "" ] && gemset="@$gemset"
  local version=$(echo $MY_RUBY_HOME | awk -F'/' '{print $NF}')
  local full="$version$gemset"
  [ "$full" != "" ] && echo "$full"
}

function rbenv_prompt {
  rbenv version | cut -d' ' -f1
}

# Move up the directory tree until we're in the root of a git project.
function cdg {
  while [ 1 ]; do

    if [ "/" = "`pwd`" ]; then
      return
    fi

    if [ -e ".git" ]; then
      return
    fi

    cd ..

  done
}

# Print a nice diff of unstaged files.
function gd {
  git diff --color $* | less -rFX
}

# Print a nice diff of staged files.
function gds {
  gd --staged $*
}

# Search the git project you're in.
function rg {
  STARTED_IN="`pwd`"

  while [ "/" != "`pwd`" ]; do

    if [ -e ".git" ]; then
      grep -n -s -r "$*" --exclude="swfobject.js" --exclude="jquery-*.js" $GREP_SEARCH_PATH
      break
    fi

    cd ..

  done

  cd "$STARTED_IN"
}

# Tell Pow to restart the project you're currently in.
function repow {
  STARTED_IN="`pwd`"

  while [ "/" != "`pwd`" ]; do

    if [ -e ".git" ]; then
      touch "tmp/restart.txt"
      break
    fi

    cd ..

  done

  cd "$STARTED_IN"
}

# Search the rails project you're in and mvim all the matches.
function rg-mvim {
  STARTED_IN="`pwd`"

  while [ "/" != "`pwd`" ]; do

    if [ -e ".git" ]; then
      grep -n -s -r "$*" $GREP_SEARCH_PATH
      grep -n -s -r -l "$*" $GREP_SEARCH_PATH | xargs mvim -p
      break
    fi

    cd ..

  done

  cd $STARTED_IN
}

function http-tgz {
  curl "$1" | tar xvz
}

function send-my-public-key {
  cat ~/.ssh/id_rsa.pub | ssh $1 'mkdir -p ~/.ssh ; cat - >> ~/.ssh/authorized_keys ; chmod -R go-rwx ~/.ssh'
}

function auto-ssh {
  while true; do
    ssh -t "$1" exec screen -R -DD
    sleep 2
  done
}

function stage {
  local APP="$1"
  local BRANCH="$2"

  if [ -z "$BRANCH" ]; then
    BRANCH="master"
  fi

  if [ -z "$APP" ]; then
    echo "stage [app]"
    echo "stage [app] [branch]"
  else
    git push github $BRANCH &&
    git push staging $BRANCH:master &&
    heroku rake db:migrate --app $APP &&
    heroku restart --app $APP &&
    heroku logs --tail --app $APP
  fi
}

# Clone a Heroku db from one instance to another using a local temporary
# PostgreSQL database.
function clone_h2h {
  local SRC="$1"
  local DST="$2"
  local TABLES="$3"

  if [ -z "$SRC" ] || [ -z "$DST" ]; then
    echo "clone_h2h [source app] [destination app]"
  else
    # Generate a temporary database name.
    local TEMPFILE=`mktemp -t DBCLONE`
    local DB=$(basename $TEMPFILE)
    rm -rf $TEMPFILE
    local URL="postgres://localhost/$DB"

    createdb $DB

    if [ -z "$TABLES" ]; then
      heroku db:pull $URL --app $SRC --confirm $SRC
      heroku db:push $URL --app $DST --confirm $DST
    else
      heroku db:pull --tables $TABLES $URL --app $SRC --confirm $SRC
      heroku db:push --tables $TABLES $URL --app $DST --confirm $DST
    fi

    dropdb $DB
  fi
}

# Set the prompts.
export PS1="\[$LIGHT_GREEN\]\$(rbenv_prompt)\$(repo_prompt) \[$LIGHT_YELLOW\]\w\[$BLUE\]]\[$BLUE\]\$ \[$CLEAR\]"
export PS2="> "
export PS4="+ "

# Configure ls.
GNU_LS_OPTIONS="--color=auto -Fh"
if [ -f "$HOME/Homebrew/bin/gls" ]; then
  alias ls="$HOME/Homebrew/bin/gls $GNU_LS_OPTIONS"
elif [ -f "/usr/local/bin/gls" ]; then
  alias ls="/usr/local/bin/gls $GNU_LS_OPTIONS"
else
  alias ls="ls $GNU_LS_OPTIONS"
fi

# Configure aliases.
alias gems='ruby -S gem search --remote'
alias gemi='ruby -S gem install --no-ri --no-rdoc --remote'
alias gemu='ruby -S gem uninstall --all --executables'
alias gs='git status'
alias gls="git log --pretty=oneline"
alias resume='screen -D -RR'
alias apts='sudo apt-cache search'
alias apti='sudo apt-get install'
alias tt='tt++ ~/.tintinrc'
alias bullfrog='ssh -t alexmchale@anticlever.com screen -D -RR'
alias faust='ssh -t alexmchale@home.anticlever.com screen -D -RR'
alias bullfrog-socks='ssh -fND localhost:8099 alexmchale@swankdb.com'
alias fvim='mvim -S ~/.vim/fullscreen.vim'
alias resume='exec screen -D -RR'
alias rm.orig="find . -name '*.orig' -exec rm -i {} \\;"
alias la="ls -a"
alias gitx="open /Applications/GitX.app ."
alias bake="bundle exec rake"
alias be="bundle exec"
alias b="bundle"
alias bundle="ruby -S bundle"
alias wrangle='/usr/bin/ruby ~/Dropbox/Projects/personal/ep_wrangler/bin/wrangle'
alias autotest="bundle && RAILS_ENV=test bundle exec rake db:migrate && RAILS_ENV=test bundle exec autotest"
alias zeus="ssh zeus.local -t exec screen -D -RR"

# Display hostname.
which figlet > /dev/null 2>&1 && echo && figlet -f slant `hostname` && echo
